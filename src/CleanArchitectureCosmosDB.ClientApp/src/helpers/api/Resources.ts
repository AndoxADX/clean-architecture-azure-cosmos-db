/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.9.2.0 (NJsonSchema v10.3.1.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

export class Client {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Get all
     * @return Success
     */
    toDoItemAll(): Promise<ToDoItemModel[]> {
        let url_ = this.baseUrl + "/api/ToDoItem";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json;odata.metadata=minimal;odata.streaming=true"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processToDoItemAll(_response);
        });
    }

    protected processToDoItemAll(response: Response): Promise<ToDoItemModel[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            result404 = _responseText === "" ? null : <ProblemDetails>JSON.parse(_responseText, this.jsonParseReviver);
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <ToDoItemModel[]>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else {
            return response.text().then((_responseText) => {
            let resultdefault: any = null;
            resultdefault = _responseText === "" ? null : <ProblemDetails>JSON.parse(_responseText, this.jsonParseReviver);
            return throwException("Error", status, _responseText, _headers, resultdefault);
            });
        }
    }

    /**
     * Create
     * @param body (optional) 
     * @return Success
     */
    toDoItem(body: CreateCommand | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/ToDoItem";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json;odata.metadata=minimal;odata.streaming=true",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processToDoItem(_response);
        });
    }

    protected processToDoItem(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            result400 = _responseText === "" ? null : <ProblemDetails>JSON.parse(_responseText, this.jsonParseReviver);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status === 201) {
            return response.text().then((_responseText) => {
            return;
            });
        } else {
            return response.text().then((_responseText) => {
            let resultdefault: any = null;
            resultdefault = _responseText === "" ? null : <ProblemDetails>JSON.parse(_responseText, this.jsonParseReviver);
            return throwException("Error", status, _responseText, _headers, resultdefault);
            });
        }
    }

    /**
     * Get by id
     * @return Success
     */
    getToDoItem(id: string | null): Promise<ToDoItemModel> {
        let url_ = this.baseUrl + "/api/ToDoItem/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json;odata.metadata=minimal;odata.streaming=true"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetToDoItem(_response);
        });
    }

    protected processGetToDoItem(response: Response): Promise<ToDoItemModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            result404 = _responseText === "" ? null : <ProblemDetails>JSON.parse(_responseText, this.jsonParseReviver);
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <ToDoItemModel>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else {
            return response.text().then((_responseText) => {
            let resultdefault: any = null;
            resultdefault = _responseText === "" ? null : <ProblemDetails>JSON.parse(_responseText, this.jsonParseReviver);
            return throwException("Error", status, _responseText, _headers, resultdefault);
            });
        }
    }

    /**
     * Update
     * @param body (optional) 
     * @return Success
     */
    toDoItem2(id: string | null, body: UpdateCommand | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/ToDoItem/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json;odata.metadata=minimal;odata.streaming=true",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processToDoItem2(_response);
        });
    }

    protected processToDoItem2(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 204) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            result404 = _responseText === "" ? null : <ProblemDetails>JSON.parse(_responseText, this.jsonParseReviver);
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            result400 = _responseText === "" ? null : <ProblemDetails>JSON.parse(_responseText, this.jsonParseReviver);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else {
            return response.text().then((_responseText) => {
            let resultdefault: any = null;
            resultdefault = _responseText === "" ? null : <ProblemDetails>JSON.parse(_responseText, this.jsonParseReviver);
            return throwException("Error", status, _responseText, _headers, resultdefault);
            });
        }
    }

    /**
     * Delete
     * @return Success
     */
    toDoItem3(id: string | null): Promise<void> {
        let url_ = this.baseUrl + "/api/ToDoItem/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processToDoItem3(_response);
        });
    }

    protected processToDoItem3(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            result404 = _responseText === "" ? null : <ProblemDetails>JSON.parse(_responseText, this.jsonParseReviver);
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            result400 = _responseText === "" ? null : <ProblemDetails>JSON.parse(_responseText, this.jsonParseReviver);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else {
            return response.text().then((_responseText) => {
            let resultdefault: any = null;
            resultdefault = _responseText === "" ? null : <ProblemDetails>JSON.parse(_responseText, this.jsonParseReviver);
            return throwException("Error", status, _responseText, _headers, resultdefault);
            });
        }
    }

    /**
     * Get audit history of an item by id
     * @return Success
     */
    getToDoItemAuditHistory(id: string | null): Promise<ToDoItemAuditModel[]> {
        let url_ = this.baseUrl + "/api/ToDoItem/{id}/AuditHistory";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json;odata.metadata=minimal;odata.streaming=true"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetToDoItemAuditHistory(_response);
        });
    }

    protected processGetToDoItemAuditHistory(response: Response): Promise<ToDoItemAuditModel[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            result404 = _responseText === "" ? null : <ProblemDetails>JSON.parse(_responseText, this.jsonParseReviver);
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <ToDoItemAuditModel[]>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else {
            return response.text().then((_responseText) => {
            let resultdefault: any = null;
            resultdefault = _responseText === "" ? null : <ProblemDetails>JSON.parse(_responseText, this.jsonParseReviver);
            return throwException("Error", status, _responseText, _headers, resultdefault);
            });
        }
    }
}

export interface ProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;
}

/** ToDoItem Api Model */
export interface ToDoItemModel {
    /** ToDoItem Id */
    id: string;
    /** Category which the To-Do-Item belongs to */
    category: string;
    /** Title of the To-Do-Item */
    title: string;
    /** Whether the To-Do-Item is done */
    readonly isCompleted: boolean;
}

/** Model to create an entity */
export interface CreateCommand {
    /** Category */
    category?: string | undefined;
    /** Title */
    title?: string | undefined;
}

/** Model to Update an entity */
export interface UpdateCommand {
    /** Id */
    id?: string | undefined;
    /** Category */
    category?: string | undefined;
    /** Title */
    title?: string | undefined;
}

/** ToDoItem audit Model */
export interface ToDoItemAuditModel {
    toDoItemModel?: ToDoItemModel;
    /** Date audit record created */
    dateCreatedUTC?: Date;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}